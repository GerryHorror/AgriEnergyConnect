@model IEnumerable<AgriEnergyConnect.DTOs.ProductDTO>

@{
    ViewData["Title"] = "Farmer Products";
    Layout = "_EmployeeLayout";
    var farmer = ViewBag.Farmer as AgriEnergyConnect.Models.Farmer;
}

@section Styles {
    <link rel="stylesheet" href="~/css/employee-product.css" />
}

<div class="dashboard-content">
    <!-- Page Header -->
    <div class="page-header">
        <div class="title-section">
            <h1>Farmer Products</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="@Url.Action("Dashboard")">Dashboard</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("ManageFarmers")">Manage Farmers</a></li>
                    <li class="breadcrumb-item">
                        <a href="@Url.Action("FarmerDetails", new { farmerId = farmer.FarmerId })">
                            @farmer.FarmName
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">Products</li>
                </ol>
            </nav>
        </div>
        <a href="@Url.Action("FarmerDetails", new { farmerId = farmer.FarmerId })" class="btn btn-outline-secondary">
            <i class="fa fa-arrow-left me-2"></i> Back to Farmer
        </a>
    </div>

    <!-- Farmer Info Card -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row align-items-center">
                <div class="col-md-2 text-center">
                    <div class="farmer-avatar-medium mx-auto"
                         style="background-color: @GetAvatarColor(farmer.FarmerId);
                                color: @GetAvatarTextColor(farmer.FarmerId);
                                border-color: @GetAvatarBorderColor(farmer.FarmerId);">
                        @GetInitials(farmer.User?.FirstName, farmer.User?.LastName)
                    </div>
                </div>
                <div class="col-md-6">
                    <h4 class="mb-1">@farmer.FarmName</h4>
                    <p class="text-muted mb-1">
                        Owner: @farmer.User?.FirstName @farmer.User?.LastName
                    </p>
                    <p class="text-muted mb-0">
                        <i class="fa fa-map-marker-alt me-2"></i>@farmer.Location
                    </p>
                </div>
                <div class="col-md-4 text-md-end">
                    <div class="d-flex flex-column align-items-md-end">
                        <span class="mb-2">
                            @if (farmer.User?.IsActive ?? false)
                            {
                                <span class="badge bg-success">Active Farmer</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Inactive Farmer</span>
                            }
                        </span>
                        <span class="mb-2">
                            <span class="badge bg-info">
                                <i class="fa fa-box me-1"></i> @Model.Count() Products
                            </span>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-header bg-light">
            <h5 class="mb-0">Filter Products</h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3" id="filterForm">
                <input type="hidden" name="farmerId" value="@farmer.FarmerId" />

                <!-- Search Term -->
                <div class="col-md-3">
                    <label for="searchTerm" class="form-label">Search</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fa fa-search"></i>
                        </span>
                        <input type="text" class="form-control" id="searchTerm" name="searchTerm"
                               placeholder="Search products..." value="@ViewBag.SearchTerm">
                    </div>
                </div>

                <!-- Category Filter -->
                <div class="col-md-3">
                    <label for="category" class="form-label">Category</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fa fa-tag"></i>
                        </span>
                        <select class="form-select" id="category" name="category">
                            <option value="">All Categories</option>
                            @foreach (var category in ViewBag.Categories ?? new List<string>())
                            {
                                <option value="@category" selected="@(ViewBag.SelectedCategory == category)">@category</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Status Filter -->
                <div class="col-md-3">
                    <label for="statusFilter" class="form-label">Status</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fa fa-toggle-on"></i>
                        </span>
                        <select class="form-select" id="statusFilter" name="statusFilter">
                            <option value="">All Products</option>
                            <option value="active" selected="@(ViewBag.SelectedStatus == "active")">In Stock</option>
                            <option value="inactive" selected="@(ViewBag.SelectedStatus == "inactive")">Out of Stock</option>
                        </select>
                    </div>
                </div>

                <!-- Date Range -->
                <div class="col-md-3">
                    <label for="startDate" class="form-label">From Date</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fa fa-calendar"></i>
                        </span>
                        <input type="date" class="form-control" id="startDate" name="startDate"
                               value="@(ViewBag.StartDate?.ToString("yyyy-MM-dd"))">
                    </div>
                </div>

                <div class="col-md-3">
                    <label for="endDate" class="form-label">To Date</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fa fa-calendar-alt"></i>
                        </span>
                        <input type="date" class="form-control" id="endDate" name="endDate"
                               value="@(ViewBag.EndDate?.ToString("yyyy-MM-dd"))">
                    </div>
                </div>

                <div class="col-12 d-flex justify-content-end">
                    <a href="@Url.Action("ViewFarmerProducts", new { farmerId = farmer.FarmerId })" class="btn btn-outline-secondary me-2">
                        <i class="fa fa-times me-2"></i> Clear Filters
                    </a>
                    <button type="submit" class="btn btn-primary">
                        <i class="fa fa-filter me-2"></i> Apply Filters
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Products Table -->
    <div class="card">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Products (@Model.Count())</h5>
            <div>
                <button type="button" class="btn btn-sm btn-outline-secondary" id="printBtn">
                    <i class="fa fa-print me-2"></i> Print List
                </button>
                <button type="button" class="btn btn-sm btn-outline-primary ms-2" id="exportBtn">
                    <i class="fa fa-file-export me-2"></i> Export
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            @if (Model != null && Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0" id="productsTable">
                        <thead class="table-light">
                            <tr>
                                <th>Product Name</th>
                                <th>Category</th>
                                <th>Production Date</th>
                                <th>Status</th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in Model)
                            {
                                <tr class="@(!product.IsActive ? "table-secondary opacity-75" : "")">
                                    <td>
                                        <strong>@product.Name</strong>
                                    </td>
                                    <td>
                                        <span class="badge product-category-badge @GetCategoryClass(product.Category)">
                                            @product.Category
                                        </span>
                                    </td>
                                    <td>@product.ProductionDate.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        @if (product.IsActive)
                                        {
                                            <span class="badge bg-success">In Stock</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Out of Stock</span>
                                        }
                                    </td>
                                    <td>@(string.IsNullOrEmpty(product.Description) ? "-" : product.Description)</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="@Url.Action("ProductDetails", new { productId = product.ProductId })"
                                               class="btn btn-sm btn-outline-info" title="View Details">
                                                <i class="fa fa-eye"></i>
                                            </a>
                                            @if (product.IsActive)
                                            {
                                                <form asp-action="DeactivateProduct" asp-route-productId="@product.ProductId" asp-route-returnUrl="@Context.Request.Path@Context.Request.QueryString" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-sm btn-outline-danger" title="Mark as Out of Stock"
                                                            onclick="return confirm('Are you sure you want to mark @product.Name as out of stock?');">
                                                        <i class="fa fa-minus-circle"></i>
                                                    </button>
                                                </form>
                                            }
                                            else
                                            {
                                                <form asp-action="ActivateProduct" asp-route-productId="@product.ProductId" asp-route-returnUrl="@Context.Request.Path@Context.Request.QueryString" method="post" class="d-inline">
                                                    @Html.AntiForgeryToken()
                                                    <button type="submit" class="btn btn-sm btn-outline-success" title="Mark as In Stock"
                                                            onclick="return confirm('Are you sure you want to mark @product.Name as in stock?');">
                                                        <i class="fa fa-check-circle"></i>
                                                    </button>
                                                </form>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="empty-state">
                        <i class="fa fa-box-open fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No products found</h5>
                        <p class="text-muted">
                            @if (!string.IsNullOrEmpty(ViewBag.SearchTerm) || !string.IsNullOrEmpty(ViewBag.SelectedCategory) || ViewBag.StartDate != null || ViewBag.EndDate != null || !string.IsNullOrEmpty(ViewBag.SelectedStatus))
                            {
                                <span>Try adjusting your filter criteria.</span>
                            }
                            else
                            {
                                <span>This farmer hasn't added any products yet.</span>
                            }
                        </p>
                        <a href="@Url.Action("ViewFarmerProducts", new { farmerId = farmer.FarmerId })" class="btn btn-outline-secondary mt-3">
                            <i class="fa fa-times me-2"></i> Clear Filters
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Print/Export Scripts -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Print button functionality
        document.getElementById('printBtn').addEventListener('click', function() {
            window.print();
        });

        // Simple export to CSV functionality
        document.getElementById('exportBtn').addEventListener('click', function() {
            // Get table data
            const table = document.getElementById('productsTable');
            const rows = table.querySelectorAll('tr');

            let csvContent = "data:text/csv;charset=utf-8,";

            // Get headers
            const headers = [];
            const headerCells = rows[0].querySelectorAll('th');
            headerCells.forEach(cell => {
                // Skip the Actions column
                if (cell.textContent.trim() !== 'Actions') {
                    headers.push('"' + cell.textContent.trim() + '"');
                }
            });
            csvContent += headers.join(',') + '\r\n';

            // Get rows
            for (let i = 1; i < rows.length; i++) {
                const row = rows[i];
                const cells = row.querySelectorAll('td');
                const rowData = [];

                cells.forEach((cell, index) => {
                    // Skip the Actions column
                    if (index < cells.length - 1) {
                        // Get text content, not HTML
                        let cellText = '';

                        // Special handling for badges
                        if (cell.querySelector('.badge')) {
                            cellText = cell.querySelector('.badge').textContent.trim();
                        } else {
                            cellText = cell.textContent.trim();
                        }

                        // Escape commas
                        cellText = '"' + cellText.replace(/"/g, '""') + '"';
                        rowData.push(cellText);
                    }
                });

                csvContent += rowData.join(',') + '\r\n';
            }

            // Create download link
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', 'farmer_products.csv');
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        });
    });
</script>

@functions {
    private string GetAvatarColor(int id)
    {
        var colors = new[] { "#E8F5E9", "#FFF3E0", "#E1F5FE", "#F3E5F5", "#FCE4EC", "#E3F2FD" };
        return colors[id % colors.Length];
    }

    private string GetAvatarTextColor(int id)
    {
        var colors = new[] { "#4CAF50", "#FF9800", "#29B6F6", "#9C27B0", "#E91E63", "#2196F3" };
        return colors[id % colors.Length];
    }

    private string GetAvatarBorderColor(int id)
    {
        var colors = new[] { "#4CAF50", "#FF9800", "#29B6F6", "#9C27B0", "#E91E63", "#2196F3" };
        return colors[id % colors.Length];
    }

    private string GetInitials(string firstName, string lastName)
    {
        if (string.IsNullOrEmpty(firstName) && string.IsNullOrEmpty(lastName)) return "??";

        var firstInitial = !string.IsNullOrEmpty(firstName) ? firstName[0].ToString() : "";
        var lastInitial = !string.IsNullOrEmpty(lastName) ? lastName[0].ToString() : "";

        return $"{firstInitial}{lastInitial}".ToUpper();
    }

    private string GetCategoryClass(string category)
    {
        return category?.ToLower() switch
        {
            "organic" => "category-organic",
            "dairy" => "category-dairy",
            "grains" => "category-grains",
            "vegetables" => "category-vegetables",
            _ => ""
        };
    }
}