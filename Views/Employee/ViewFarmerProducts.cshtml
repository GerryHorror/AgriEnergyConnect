@model IEnumerable<AgriEnergyConnect.DTOs.ProductDTO>
@using AgriEnergyConnect.Helpers

@{
    ViewData["Title"] = "Farmer Products";
    Layout = "_EmployeeLayout";
    var farmer = ViewBag.Farmer as AgriEnergyConnect.Models.Farmer;
}

@section Styles {
    <link rel="stylesheet" href="~/css/employee-product.css" />
}

<div class="dashboard-content">
    <!-- Page Header -->
    <div class="page-header">
        <div class="title-section">
            <h1 class="employee-title">Farmer Products</h1>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb mb-0">
                    <li class="breadcrumb-item"><a href="@Url.Action("Dashboard")">Dashboard</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("ManageFarmers")">Manage Farmers</a></li>
                    <li class="breadcrumb-item">
                        <a href="@Url.Action("FarmerDetails", new { farmerId = farmer.FarmerId })">
                            @farmer.FarmName
                        </a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">Products</li>
                </ol>
            </nav>
        </div>
        <a href="@Url.Action("FarmerDetails", new { farmerId = farmer.FarmerId })" class="btn btn-outline-secondary">
            <i class="fa fa-arrow-left me-2"></i> Back to Farmer
        </a>
    </div>

    <!-- Farmer Info Card -->
    <div class="card mb-4">
        <div class="card-body">
            <div class="row align-items-center">
                <div class="col-md-2 text-center">
                    <div class="farmer-avatar-large" style="border-color: @GetAvatarBorderColor(farmer.FarmerId); background: @GetAvatarColor(farmer.FarmerId); color: @GetAvatarTextColor(farmer.FarmerId);">
                        @GetInitials(farmer.User?.FirstName, farmer.User?.LastName)
                    </div>
                </div>
                <div class="col-md-6">
                    <h4 class="mb-1">@farmer.FarmName</h4>
                    <p class="text-muted mb-1">
                        Owner: @farmer.User?.FirstName @farmer.User?.LastName
                    </p>
                    <p class="text-muted mb-0">
                        <i class="fa fa-map-marker-alt me-2"></i>@farmer.Location
                    </p>
                </div>
                <div class="col-md-4 text-md-end">
                    <div class="d-flex flex-column align-items-md-end">
                        <span class="mb-2">
                            @if (farmer.User?.IsActive ?? false)
                            {
                                <span class="badge bg-success">Active Farmer</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Inactive Farmer</span>
                            }
                        </span>
                        <span class="mb-2">
                            <span class="badge bg-info">
                                <i class="fa fa-box me-1"></i> @Model.Count() Products
                            </span>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="card mb-4">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Filter Products</h5>
            <button class="btn btn-sm btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#filterCollapse" aria-expanded="true">
                <i class="fa fa-chevron-up"></i>
            </button>
        </div>
        <div class="collapse show" id="filterCollapse">
            <div class="card-body">
                <form method="get" class="row g-3" id="filterForm">
                    <input type="hidden" name="farmerId" value="@farmer.FarmerId" />

                    <!-- Search Term -->
                    <div class="col-md-4 col-lg-3">
                        <label for="searchTerm" class="form-label">Search</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fa fa-search"></i>
                            </span>
                            <input type="text" class="form-control" id="searchTerm" name="searchTerm"
                                   placeholder="Search products..." value="@ViewBag.SearchTerm">
                        </div>
                    </div>

                    <!-- Category Filter -->
                    <div class="col-md-4 col-lg-3">
                        <label for="category" class="form-label">Category</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fa fa-tag"></i>
                            </span>
                            <select class="form-select" id="category" name="category">
                                <option value="">All Categories</option>
                                @foreach (var category in CategoryHelper.Categories)
                                {
                                    <option value="@category.Name" selected="@(ViewBag.SelectedCategory == category.Name)">@category.Name</option>
                                }
                            </select>
                        </div>
                    </div>

                    <!-- Status Filter -->
                    <div class="col-md-4 col-lg-3">
                        <label for="statusFilter" class="form-label">Status</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fa fa-toggle-on"></i>
                            </span>
                            <select class="form-select" id="statusFilter" name="statusFilter">
                                <option value="">All Products</option>
                                <option value="active" selected="@(ViewBag.SelectedStatus == "active")">In Stock</option>
                                <option value="inactive" selected="@(ViewBag.SelectedStatus == "inactive")">Out of Stock</option>
                            </select>
                        </div>
                    </div>

                    <!-- Date Range -->
                    <div class="col-md-6 col-lg-3">
                        <label for="startDate" class="form-label">From Date</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fa fa-calendar"></i>
                            </span>
                            <input type="date" class="form-control" id="startDate" name="startDate"
                                   value="@(ViewBag.StartDate?.ToString("yyyy-MM-dd"))">
                        </div>
                    </div>

                    <div class="col-md-6 col-lg-3">
                        <label for="endDate" class="form-label">To Date</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fa fa-calendar-alt"></i>
                            </span>
                            <input type="date" class="form-control" id="endDate" name="endDate"
                                   value="@(ViewBag.EndDate?.ToString("yyyy-MM-dd"))">
                        </div>
                    </div>

                    <div class="col-12 d-flex justify-content-end">
                        <a href="@Url.Action("ViewFarmerProducts", new { farmerId = farmer.FarmerId })" class="btn btn-outline-secondary me-2">
                            <i class="fa fa-times me-2"></i> Clear Filters
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <i class="fa fa-filter me-2"></i> Apply Filters
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Products Table -->
    <div class="card">
        <div class="card-header bg-light d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Products (@Model.Count())</h5>
            <div>
                <button type="button" class="btn btn-sm btn-outline-secondary" id="printBtn" data-bs-toggle="tooltip" title="Print product list">
                    <i class="fa fa-print me-2"></i> Print List
                </button>
                <button type="button" class="btn btn-sm btn-outline-primary ms-2" id="exportBtn" data-bs-toggle="tooltip" title="Export to CSV">
                    <i class="fa fa-file-export me-2"></i> Export
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            @if (Model != null && Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0" id="productsTable">
                        <thead class="table-light">
                            <tr>
                                <th class="sortable" data-sort="name">Product Name <i class="fa fa-sort"></i></th>
                                <th class="sortable" data-sort="category">Category <i class="fa fa-sort"></i></th>
                                <th class="sortable" data-sort="date">Production Date <i class="fa fa-sort"></i></th>
                                <th class="sortable" data-sort="status">Status <i class="fa fa-sort"></i></th>
                                <th>Description</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var product in Model)
                            {
                                <tr class="@(!product.IsActive ? "table-secondary opacity-75" : "")">
                                    <td>
                                        <strong>@product.Name</strong>
                                    </td>
                                    <td>
                                        <span class="badge product-category-badge" style="background-color: @CategoryHelper.GetCategoryColor(product.Category); color: #333;">
                                            @product.Category
                                        </span>
                                    </td>
                                    <td>@product.ProductionDate.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        @if (product.IsActive)
                                        {
                                            <span class="badge bg-success">In Stock</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">Out of Stock</span>
                                        }
                                    </td>
                                    <td>@(string.IsNullOrEmpty(product.Description) ? "-" : product.Description)</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="@Url.Action("ProductDetails", new { productId = product.ProductId })"
                                               class="btn btn-sm btn-outline-info" title="View Details" data-bs-toggle="tooltip">
                                                <i class="fa fa-eye"></i>
                                            </a>
                                            @if (product.IsActive)
                                            {
                                                <form asp-action="DeactivateProduct" asp-route-productId="@product.ProductId" asp-route-returnUrl="@Context.Request.Path@Context.Request.QueryString" method="post" class="d-inline confirm-action-form" data-product-name="@product.Name" data-action-type="deactivate">
                                                    @Html.AntiForgeryToken()
                                                    <button type="button" class="btn btn-sm btn-outline-danger confirm-action-btn" title="Mark as Out of Stock" data-bs-toggle="tooltip">
                                                        <i class="fa fa-minus-circle"></i>
                                                    </button>
                                                </form>
                                            }
                                            else
                                            {
                                                <form asp-action="ActivateProduct" asp-route-productId="@product.ProductId" asp-route-returnUrl="@Context.Request.Path@Context.Request.QueryString" method="post" class="d-inline confirm-action-form" data-product-name="@product.Name" data-action-type="activate">
                                                    @Html.AntiForgeryToken()
                                                    <button type="button" class="btn btn-sm btn-outline-success confirm-action-btn" title="Mark as In Stock" data-bs-toggle="tooltip">
                                                        <i class="fa fa-check-circle"></i>
                                                    </button>
                                                </form>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="empty-state">
                        <i class="fa fa-box-open fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No products found</h5>
                        <p class="text-muted">
                            @if (!string.IsNullOrEmpty(ViewBag.SearchTerm) || !string.IsNullOrEmpty(ViewBag.SelectedCategory) || ViewBag.StartDate != null || ViewBag.EndDate != null || !string.IsNullOrEmpty(ViewBag.SelectedStatus))
                            {
                                <span>No products match your current filter criteria. Try adjusting your filters or <a href="@Url.Action("ViewFarmerProducts", new { farmerId = farmer.FarmerId })">clear all filters</a>.</span>
                            }
                            else
                            {
                                <span>This farmer hasn't added any products yet. They can add products through their farmer dashboard.</span>
                            }
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmActionModal" tabindex="-1" aria-labelledby="confirmActionModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmActionModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <span id="confirmActionMessage"></span>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmActionSubmitBtn">Yes, continue</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/employee-product.js"></script>
    <script>
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });

        // Initialize sorting
        document.querySelectorAll('.sortable').forEach(header => {
            header.addEventListener('click', () => {
                const sortBy = header.dataset.sort;
                const isAsc = header.classList.contains('asc');

                // Update sort indicators
                document.querySelectorAll('.sortable i').forEach(icon => {
                    icon.className = 'fa fa-sort';
                });
                header.querySelector('i').className = isAsc ? 'fa fa-sort-desc' : 'fa fa-sort-asc';
                header.classList.toggle('asc');

                // Sort the table
                const tbody = document.querySelector('#productsTable tbody');
                const rows = Array.from(tbody.querySelectorAll('tr'));

                rows.sort((a, b) => {
                    const aValue = a.querySelector(`td:nth-child(${Array.from(header.parentNode.children).indexOf(header) + 1})`).textContent.trim();
                    const bValue = b.querySelector(`td:nth-child(${Array.from(header.parentNode.children).indexOf(header) + 1})`).textContent.trim();

                    if (sortBy === 'date') {
                        return isAsc ?
                            new Date(bValue) - new Date(aValue) :
                            new Date(aValue) - new Date(bValue);
                    }

                    return isAsc ?
                        bValue.localeCompare(aValue) :
                        aValue.localeCompare(bValue);
                });

                tbody.innerHTML = '';
                rows.forEach(row => tbody.appendChild(row));
            });
        });

        // Custom confirmation modal for product status change
        let formToSubmit = null;
        document.querySelectorAll('.confirm-action-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.preventDefault();
                const form = this.closest('form');
                const productName = form.getAttribute('data-product-name');
                const actionType = form.getAttribute('data-action-type');
                let message = '';
                if (actionType === 'deactivate') {
                    message = `Are you sure you want to mark <strong>${productName}</strong> as <span class='text-danger'>out of stock</span>?`;
                } else {
                    message = `Are you sure you want to mark <strong>${productName}</strong> as <span class='text-success'>in stock</span>?`;
                }
                document.getElementById('confirmActionMessage').innerHTML = message;
                formToSubmit = form;
                var modal = new bootstrap.Modal(document.getElementById('confirmActionModal'));
                modal.show();
            });
        });
        document.getElementById('confirmActionSubmitBtn').addEventListener('click', function() {
            if (formToSubmit) {
                formToSubmit.submit();
            }
            var modalEl = document.getElementById('confirmActionModal');
            var modal = bootstrap.Modal.getInstance(modalEl);
            modal.hide();
        });
    </script>
}

@functions {
    private string GetAvatarColor(int id)
    {
        var colors = new[] { "#E8F5E9", "#FFF3E0", "#E1F5FE", "#F3E5F5", "#FCE4EC", "#E3F2FD" };
        return colors[id % colors.Length];
    }

    private string GetAvatarTextColor(int id)
    {
        var colors = new[] { "#4CAF50", "#FF9800", "#29B6F6", "#9C27B0", "#E91E63", "#2196F3" };
        return colors[id % colors.Length];
    }

    private string GetAvatarBorderColor(int id)
    {
        var colors = new[] { "#4CAF50", "#FF9800", "#29B6F6", "#9C27B0", "#E91E63", "#2196F3" };
        return colors[id % colors.Length];
    }

    private string GetInitials(string firstName, string lastName)
    {
        if (string.IsNullOrEmpty(firstName) && string.IsNullOrEmpty(lastName)) return "??";

        var firstInitial = !string.IsNullOrEmpty(firstName) ? firstName[0].ToString() : "";
        var lastInitial = !string.IsNullOrEmpty(lastName) ? lastName[0].ToString() : "";

        return $"{firstInitial}{lastInitial}".ToUpper();
    }
}